// <auto-generated />
using System;
using FitnessManager.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FitnessManager.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FitnessClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.HasIndex("DepartmentId")
                        .IsUnique()
                        .HasFilter("[DepartmentId] IS NOT NULL");

                    b.HasIndex("FitnessClubId")
                        .IsUnique()
                        .HasFilter("[FitnessClubId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.ContactEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FitnessClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.HasIndex("DepartmentId")
                        .IsUnique()
                        .HasFilter("[DepartmentId] IS NOT NULL");

                    b.HasIndex("FitnessClubId")
                        .IsUnique()
                        .HasFilter("[FitnessClubId] IS NOT NULL");

                    b.HasIndex("InstructorId")
                        .IsUnique()
                        .HasFilter("[InstructorId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.CustomerFitnessClassEnrolmentEntity", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrolmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId", "EnrolmentId");

                    b.HasIndex("EnrolmentId");

                    b.ToTable("CustomerClassesEnrolments");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.CustomerSubscriptionsEntity", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId", "SubscriptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("CustomerSubscriptions");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.EquipmentReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SportsEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SportsEquipmentId");

                    b.ToTable("EquipmentReservations");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClassEnrolmentsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FitnessClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClassId");

                    b.HasIndex("InstructorId");

                    b.ToTable("FitnessClassEnrolments");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClassEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefaultInstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultInstructorId");

                    b.ToTable("FitnessClasses");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClubEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FitnessClubNetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubNetworkId");

                    b.ToTable("FitnessClubs");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClubNetworkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FitnessClubNetworks");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.HallEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.InstructorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.SportsEquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("SportsEquipment");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerPeriod")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.AddressEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.CustomerEntity", "Customer")
                        .WithOne("Address")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.AddressEntity", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessManager.DataAccess.Entities.DepartmentEntity", "Department")
                        .WithOne("Address")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.AddressEntity", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessManager.DataAccess.Entities.FitnessClubEntity", "FitnessClub")
                        .WithOne("BaseAddress")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.AddressEntity", "FitnessClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessManager.DataAccess.Entities.UserEntity", "User")
                        .WithOne("Address")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.AddressEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("FitnessClub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.ContactEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.CustomerEntity", "Customer")
                        .WithOne("Contact")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.ContactEntity", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessManager.DataAccess.Entities.DepartmentEntity", "Department")
                        .WithOne("Contact")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.ContactEntity", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessManager.DataAccess.Entities.FitnessClubEntity", "FitnessClub")
                        .WithOne("BaseContact")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.ContactEntity", "FitnessClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessManager.DataAccess.Entities.InstructorEntity", "Instructor")
                        .WithOne("Contact")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.ContactEntity", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessManager.DataAccess.Entities.UserEntity", "User")
                        .WithOne("Contact")
                        .HasForeignKey("FitnessManager.DataAccess.Entities.ContactEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("FitnessClub");

                    b.Navigation("Instructor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.CustomerFitnessClassEnrolmentEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.CustomerEntity", "Customer")
                        .WithMany("Enrolments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessManager.DataAccess.Entities.FitnessClassEnrolmentsEntity", "Enrolment")
                        .WithMany("Customers")
                        .HasForeignKey("EnrolmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Enrolment");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.CustomerSubscriptionsEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.CustomerEntity", "Customer")
                        .WithMany("ActiveSubscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessManager.DataAccess.Entities.SubscriptionEntity", "Subscription")
                        .WithMany("Customers")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.FitnessClubEntity", "FitnessClub")
                        .WithMany("Departments")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.EquipmentReservationEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.CustomerEntity", "Customer")
                        .WithMany("EquipmentReservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessManager.DataAccess.Entities.SportsEquipmentEntity", "SportsEquipment")
                        .WithMany("EquipmentReservations")
                        .HasForeignKey("SportsEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SportsEquipment");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClassEnrolmentsEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.FitnessClassEntity", "FitnessClass")
                        .WithMany("Enrolments")
                        .HasForeignKey("FitnessClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessManager.DataAccess.Entities.InstructorEntity", "Instructor")
                        .WithMany("ClassEnrolments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FitnessClass");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClassEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.InstructorEntity", "DefaultInstructor")
                        .WithMany("ClassesAssignedAsDefaultInstructor")
                        .HasForeignKey("DefaultInstructorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DefaultInstructor");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClubEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.FitnessClubNetworkEntity", "FitnessClubNetwork")
                        .WithMany("FitnessClubs")
                        .HasForeignKey("FitnessClubNetworkId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FitnessClubNetwork");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.HallEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.FitnessClubEntity", "FitnessClub")
                        .WithMany("Halls")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.SportsEquipmentEntity", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.HallEntity", "Hall")
                        .WithMany("SportsEquipments")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessManager.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessManager.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.CustomerEntity", b =>
                {
                    b.Navigation("ActiveSubscriptions");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("Enrolments");

                    b.Navigation("EquipmentReservations");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClassEnrolmentsEntity", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClassEntity", b =>
                {
                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClubEntity", b =>
                {
                    b.Navigation("BaseAddress");

                    b.Navigation("BaseContact");

                    b.Navigation("Departments");

                    b.Navigation("Halls");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.FitnessClubNetworkEntity", b =>
                {
                    b.Navigation("FitnessClubs");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.HallEntity", b =>
                {
                    b.Navigation("SportsEquipments");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.InstructorEntity", b =>
                {
                    b.Navigation("ClassEnrolments");

                    b.Navigation("ClassesAssignedAsDefaultInstructor");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.SportsEquipmentEntity", b =>
                {
                    b.Navigation("EquipmentReservations");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.SubscriptionEntity", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FitnessManager.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Contact");
                });
#pragma warning restore 612, 618
        }
    }
}
